$date
  Wed May 28 19:07:08 2025
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module tb_pc $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var reg 1 # wr_enable $end
$var reg 7 $ pc_out[6:0] $end
$scope module uut $end
$var reg 1 % clk $end
$var reg 1 & reset $end
$var reg 1 ' wr_enable $end
$var reg 7 ( pc_out[6:0] $end
$var reg 16 ) reg_out[15:0] $end
$var reg 16 * reg_in[15:0] $end
$var reg 7 + reg_7[6:0] $end
$var reg 7 , soma[6:0] $end
$scope module reg_inst $end
$var reg 1 - clk $end
$var reg 16 . input[15:0] $end
$var reg 1 / wr_enable $end
$var reg 1 0 reset $end
$var reg 16 1 output[15:0] $end
$var reg 16 2 data[15:0] $end
$upscope $end
$scope module somador_inst $end
$var reg 7 3 entrada[6:0] $end
$var reg 7 4 saida[6:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
0!
1"
1#
b0000000 $
0%
1&
1'
b0000000 (
b0000000000000000 )
b0000000000000001 *
b0000000 +
b0000001 ,
0-
b0000000000000001 .
1/
10
b0000000000000000 1
b0000000000000000 2
b0000000 3
b0000001 4
#5000000
1!
1%
1-
#10000000
0!
0"
0%
0&
0-
00
#15000000
1!
b0000001 $
1%
b0000001 (
b0000000000000001 )
b0000000000000010 *
b0000001 +
b0000010 ,
1-
b0000000000000010 .
b0000000000000001 1
b0000000000000001 2
b0000001 3
b0000010 4
#20000000
0!
0%
0-
#25000000
1!
b0000010 $
1%
b0000010 (
b0000000000000010 )
b0000000000000011 *
b0000010 +
b0000011 ,
1-
b0000000000000011 .
b0000000000000010 1
b0000000000000010 2
b0000010 3
b0000011 4
#30000000
0!
0%
0-
#35000000
1!
b0000011 $
1%
b0000011 (
b0000000000000011 )
b0000000000000100 *
b0000011 +
b0000100 ,
1-
b0000000000000100 .
b0000000000000011 1
b0000000000000011 2
b0000011 3
b0000100 4
#40000000
0!
0%
0-
#45000000
1!
b0000100 $
1%
b0000100 (
b0000000000000100 )
b0000000000000101 *
b0000100 +
b0000101 ,
1-
b0000000000000101 .
b0000000000000100 1
b0000000000000100 2
b0000100 3
b0000101 4
#50000000
0!
0%
0-
#55000000
1!
b0000101 $
1%
b0000101 (
b0000000000000101 )
b0000000000000110 *
b0000101 +
b0000110 ,
1-
b0000000000000110 .
b0000000000000101 1
b0000000000000101 2
b0000101 3
b0000110 4
#60000000
0!
0%
0-
#65000000
1!
b0000110 $
1%
b0000110 (
b0000000000000110 )
b0000000000000111 *
b0000110 +
b0000111 ,
1-
b0000000000000111 .
b0000000000000110 1
b0000000000000110 2
b0000110 3
b0000111 4
#70000000
0!
0%
0-
#75000000
1!
b0000111 $
1%
b0000111 (
b0000000000000111 )
b0000000000001000 *
b0000111 +
b0001000 ,
1-
b0000000000001000 .
b0000000000000111 1
b0000000000000111 2
b0000111 3
b0001000 4
#80000000
0!
0%
0-
#85000000
1!
b0001000 $
1%
b0001000 (
b0000000000001000 )
b0000000000001001 *
b0001000 +
b0001001 ,
1-
b0000000000001001 .
b0000000000001000 1
b0000000000001000 2
b0001000 3
b0001001 4
#90000000
0!
0%
0-
#95000000
1!
b0001001 $
1%
b0001001 (
b0000000000001001 )
b0000000000001010 *
b0001001 +
b0001010 ,
1-
b0000000000001010 .
b0000000000001001 1
b0000000000001001 2
b0001001 3
b0001010 4
#100000000
0!
0%
0-
#105000000
1!
b0001010 $
1%
b0001010 (
b0000000000001010 )
b0000000000001011 *
b0001010 +
b0001011 ,
1-
b0000000000001011 .
b0000000000001010 1
b0000000000001010 2
b0001010 3
b0001011 4
#110000000
0!
0%
0-
#115000000
1!
b0001011 $
1%
b0001011 (
b0000000000001011 )
b0000000000001100 *
b0001011 +
b0001100 ,
1-
b0000000000001100 .
b0000000000001011 1
b0000000000001011 2
b0001011 3
b0001100 4
#120000000
0!
0%
0-
#125000000
1!
b0001100 $
1%
b0001100 (
b0000000000001100 )
b0000000000001101 *
b0001100 +
b0001101 ,
1-
b0000000000001101 .
b0000000000001100 1
b0000000000001100 2
b0001100 3
b0001101 4
#130000000
0!
0%
0-
#135000000
1!
b0001101 $
1%
b0001101 (
b0000000000001101 )
b0000000000001110 *
b0001101 +
b0001110 ,
1-
b0000000000001110 .
b0000000000001101 1
b0000000000001101 2
b0001101 3
b0001110 4
#140000000
0!
0%
0-
#145000000
1!
b0001110 $
1%
b0001110 (
b0000000000001110 )
b0000000000001111 *
b0001110 +
b0001111 ,
1-
b0000000000001111 .
b0000000000001110 1
b0000000000001110 2
b0001110 3
b0001111 4
#150000000
